version: 2.1

# Define executors for different environments
executors:
  flutter_executor:
    docker:
      - image: cimg/android:2023.12.1
    working_directory: ~/project
    resource_class: medium
    environment:
      FLUTTER_VERSION: "3.27.1"

# Define reusable commands
commands:
  setup_flutter:
    description: "Install and setup Flutter SDK"
    steps:
      - run:
          name: Install Flutter SDK
          command: |
            if [ ! -d "$HOME/flutter" ]; then
              echo "Installing Flutter SDK..."
              git clone https://github.com/flutter/flutter.git -b stable ~/flutter
            else
              echo "Flutter SDK already exists, updating..."
              cd ~/flutter && git pull origin stable
            fi
            echo 'export PATH="$PATH:$HOME/flutter/bin"' >> $BASH_ENV
            echo 'export PATH="$PATH:$HOME/.pub-cache/bin"' >> $BASH_ENV
            source $BASH_ENV
            flutter doctor -v
      - run:
          name: Install Android build tools
          command: |
            echo "Installing CMake and NDK for native builds..."
            sudo apt-get update && sudo apt-get install -y ninja-build cmake
            
            # Create a symbolic link to ninja in a location where CMake can find it
            sudo ln -sf /usr/bin/ninja-build /usr/bin/ninja
            
            # Install CMake and NDK via sdkmanager
            echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "cmake;3.22.1" || true
            echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "ndk;26.1.10909125" || true
            
            # Set environment variables for CMake and NDK
            echo 'export ANDROID_NDK_HOME="$ANDROID_HOME/ndk/26.1.10909125"' >> $BASH_ENV
            echo 'export CMAKE_HOME="$ANDROID_HOME/cmake/3.22.1"' >> $BASH_ENV
            echo 'export PATH="$PATH:$CMAKE_HOME/bin:/usr/bin"' >> $BASH_ENV
            source $BASH_ENV
            
            # Wait for SDK manager operations to complete
            sleep 5
            
            # Verify ninja is installed and can be found
            ninja --version || echo "Ninja version check failed"
            which ninja || echo "Ninja not found in PATH"
            
            # Ensure ninja is available in CMake bin directory and set proper permissions
            if [ -d "$ANDROID_HOME/cmake/3.22.1/bin" ]; then
              sudo cp /usr/bin/ninja $ANDROID_HOME/cmake/3.22.1/bin/ninja || true
              sudo chmod +x $ANDROID_HOME/cmake/3.22.1/bin/ninja || true
            fi
            
            # Also add the CMake's ninja to system PATH if it exists
            if [ -f "$ANDROID_HOME/cmake/3.22.1/bin/ninja" ]; then
              echo 'export PATH="$ANDROID_HOME/cmake/3.22.1/bin:$PATH"' >> $BASH_ENV
            fi
            
            # Set CMAKE_MAKE_PROGRAM to explicitly tell CMake where ninja is
            echo 'export CMAKE_MAKE_PROGRAM="/usr/bin/ninja"' >> $BASH_ENV
            
            # Alternative: create a wrapper script to ensure ninja is found
            sudo mkdir -p /usr/local/bin
            sudo ln -sf /usr/bin/ninja /usr/local/bin/ninja
            echo 'export PATH="/usr/local/bin:$PATH"' >> $BASH_ENV
            
            source $BASH_ENV
      - run:
          name: Install dependencies
          command: |
            echo "Installing Flutter dependencies..."
            flutter pub get
            flutter doctor
      - run:
          name: Generate mocks and other files
          command: |
            echo "Generating mock files and other build artifacts..."
            dart run build_runner build --delete-conflicting-outputs || true
      - run:
          name: Verify build tools
          command: |
            echo "=== Build Tools Verification ==="
            echo "Flutter doctor output:"
            flutter doctor -v
            echo ""
            echo "Ninja verification:"
            which ninja && ninja --version || echo "ERROR: Ninja not found or not working"
            echo ""
            echo "CMake verification:"
            which cmake && cmake --version | head -1 || echo "ERROR: CMake not found or not working"
            echo ""
            echo "Android SDK verification:"
            $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list_installed | grep -E "(cmake|ndk)"
            echo "================================="

  restore_flutter_cache:
    description: "Restore Flutter and dependency caches"
    steps:
      - restore_cache:
          keys:
            - flutter-{{ checksum "pubspec.lock" }}-{{ .Environment.FLUTTER_VERSION }}-v3
            - flutter-{{ .Environment.FLUTTER_VERSION }}-v3
            - flutter-v3

  save_flutter_cache:
    description: "Save Flutter and dependency caches"
    steps:
      - save_cache:
          key: flutter-{{ checksum "pubspec.lock" }}-{{ .Environment.FLUTTER_VERSION }}-v3
          paths:
            - ~/.pub-cache
            - ~/flutter
            - ~/.android/sdk/cmake
            - ~/.android/sdk/ndk

# Define jobs
jobs:
  # Code quality and linting job
  code_quality:
    executor: flutter_executor
    steps:
      - checkout
      - restore_flutter_cache
      - setup_flutter
      - run:
          name: Format check
          command: dart format --output=none --set-exit-if-changed .
      - run:
          name: Analyze code
          command: flutter analyze --fatal-infos --fatal-warnings
      - save_flutter_cache

  # Unit and widget tests
  test:
    executor: flutter_executor
    steps:
      - checkout
      - restore_flutter_cache
      - setup_flutter
      - run:
          name: Run unit and widget tests
          command: flutter test --coverage
      - store_artifacts:
          path: coverage/lcov.info
          destination: coverage/lcov.info
      - save_flutter_cache

  # Build Android APK
  build_android:
    executor: flutter_executor
    steps:
      - checkout
      - restore_flutter_cache
      - setup_flutter
      - run:
          name: Build Android APK
          command: |
            echo "Building Android APK..."
            
            # Debug information for troubleshooting
            echo "=== Debug Information ==="
            echo "Ninja location: $(which ninja || echo 'not found')"
            echo "Ninja version: $(ninja --version || echo 'version check failed')"
            echo "CMake location: $(which cmake || echo 'not found')"
            echo "CMake version: $(cmake --version | head -1 || echo 'version check failed')"
            echo "CMAKE_HOME: $CMAKE_HOME"
            echo "ANDROID_HOME: $ANDROID_HOME"
            echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
            echo "PATH: $PATH"
            echo "Contents of CMake bin directory:"
            ls -la $ANDROID_HOME/cmake/3.22.1/bin/ || echo "CMake bin directory not found"
            echo "Check if ninja exists in multiple locations:"
            find $ANDROID_HOME -name "ninja" -type f 2>/dev/null || echo "No ninja found in Android SDK"
            echo "=========================="
            
            # Try normal build first
            flutter build apk --release || {
              echo "Normal build failed, trying without native code optimization..."
              flutter build apk --release --no-tree-shake-icons --verbose
            }
      - store_artifacts:
          path: build/app/outputs/flutter-apk/app-release.apk
          destination: android/app-release.apk
      - save_flutter_cache

# Define workflows
workflows:
  version: 2
  
  # Basic workflow - runs on all branches
  build_and_test:
    jobs:
      - code_quality
      - test:
          requires:
            - code_quality
      - build_android:
          requires:
            - test
          filters:
            branches:
              only:
                - main
                - develop