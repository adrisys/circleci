version: 2.1

# Import orbs
orbs:
  flutter: circleci/flutter@3.0.0
  slack: circleci/slack@6.0.0

# Define executors for different environments
executors:
  flutter_executor:
    docker:
      # Option 1: Cirrus Labs Flutter image (includes Flutter + Android SDK)
      - image: ghcr.io/cirruslabs/flutter:stable
      # Option 2: Specific version if needed
      # - image: ghcr.io/cirruslabs/flutter:3.35.5
      # Option 3: CircleCI Android image with Flutter
      # - image: cimg/android:2024.01.1-flutter
      # Option 4: If the above don't work, fallback to base Android image
      # - image: cimg/android:2024.01.1
    working_directory: ~/project
    resource_class: medium

# Define reusable commands
commands:
  setup_flutter:
    description: "Setup Flutter dependencies and build tools"
    steps:
      - run:
          name: Verify Flutter and setup build tools
          command: |
            echo "Verifying Flutter installation..."
            flutter --version
            flutter doctor -v
            
            echo "Setting up pub cache path..."
            echo 'export PATH="$PATH:$HOME/.pub-cache/bin"' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Setup Android build tools
          command: |
            echo "Setting up Android build tools for native compilation..."
            
            # Install ninja build system (required for CMake)
            sudo apt-get update && sudo apt-get install -y ninja-build cmake
            
            # Create ninja symlink
            sudo ln -sf /usr/bin/ninja-build /usr/bin/ninja || true
            
            # Verify existing Android SDK components
            if [ -n "$ANDROID_HOME" ] && [ -d "$ANDROID_HOME" ]; then
              echo "Android SDK found at: $ANDROID_HOME"
              
              # Install/verify CMake and NDK if needed
              $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "cmake;3.22.1" "ndk;26.1.10909125" || {
                echo "Using pre-installed SDK components"
              }
              
              # Set up environment variables
              if [ -d "$ANDROID_HOME/ndk"* ]; then
                NDK_PATH=$(find $ANDROID_HOME/ndk -maxdepth 1 -type d | tail -1)
                echo "export ANDROID_NDK_HOME=$NDK_PATH" >> $BASH_ENV
              fi
              
              if [ -d "$ANDROID_HOME/cmake"* ]; then
                CMAKE_PATH=$(find $ANDROID_HOME/cmake -maxdepth 1 -type d | tail -1)
                echo "export CMAKE_HOME=$CMAKE_PATH" >> $BASH_ENV
                echo "export PATH=$CMAKE_PATH/bin:$PATH" >> $BASH_ENV
              fi
            fi
            
            # Ensure ninja is available
            echo "export CMAKE_MAKE_PROGRAM=/usr/bin/ninja" >> $BASH_ENV
            echo "export PATH=/usr/bin:$PATH" >> $BASH_ENV
            
            source $BASH_ENV
            
            # Verify tools
            echo "Ninja: $(which ninja && ninja --version || echo 'not found')"
            echo "CMake: $(which cmake && cmake --version | head -1 || echo 'not found')"
      - run:
          name: Install dependencies
          command: |
            echo "Installing Flutter dependencies..."
            flutter pub get
            flutter doctor
      - run:
          name: Generate mocks and other files
          command: |
            echo "Generating mock files and other build artifacts..."
            dart run build_runner build --delete-conflicting-outputs || true
      - run:
          name: Verify build tools
          command: |
            echo "=== Build Tools Verification ==="
            echo "Flutter doctor output:"
            flutter doctor -v
            echo ""
            echo "Ninja verification:"
            which ninja && ninja --version || echo "ERROR: Ninja not found or not working"
            echo ""
            echo "CMake verification:"
            which cmake && cmake --version | head -1 || echo "ERROR: CMake not found or not working"
            echo ""
            echo "Android SDK verification:"
            $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list_installed | grep -E "(cmake|ndk)"
            echo "================================="

  restore_flutter_cache:
    description: "Restore Flutter and dependency caches"
    steps:
      - restore_cache:
          keys:
            - flutter-deps-{{ checksum "pubspec.lock" }}-v4
            - flutter-deps-v4

  save_flutter_cache:
    description: "Save Flutter and dependency caches"
    steps:
      - save_cache:
          key: flutter-deps-{{ checksum "pubspec.lock" }}-v4
          paths:
            - ~/.pub-cache

# Define jobs
jobs:
  # Code quality and linting job
  code_quality:
    executor: flutter_executor
    steps:
      - checkout
      - restore_flutter_cache
      - setup_flutter
      - run:
          name: Format check
          command: dart format --output=none --set-exit-if-changed .
      - run:
          name: Analyze code
          command: flutter analyze --fatal-infos --fatal-warnings
      - save_flutter_cache

  # Unit and widget tests
  test:
    executor: flutter_executor
    steps:
      - checkout
      - restore_flutter_cache
      - setup_flutter
      - run:
          name: Run unit and widget tests
          command: flutter test --coverage
      - store_artifacts:
          path: coverage/lcov.info
          destination: coverage/lcov.info
      - save_flutter_cache

  # Build Android APK
  build_android:
    executor: flutter_executor
    steps:
      - checkout
      - restore_flutter_cache
      - setup_flutter
      - run:
          name: Build Android APK
          command: |
            echo "Building Android APK..."
            
            # Debug information for troubleshooting
            echo "=== Debug Information ==="
            echo "Ninja location: $(which ninja || echo 'not found')"
            echo "Ninja version: $(ninja --version || echo 'version check failed')"
            echo "CMake location: $(which cmake || echo 'not found')"
            echo "CMake version: $(cmake --version | head -1 || echo 'version check failed')"
            echo "CMAKE_HOME: $CMAKE_HOME"
            echo "ANDROID_HOME: $ANDROID_HOME"
            echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
            echo "PATH: $PATH"
            echo "Contents of CMake bin directory:"
            ls -la $ANDROID_HOME/cmake/3.22.1/bin/ || echo "CMake bin directory not found"
            echo "Check if ninja exists in multiple locations:"
            find $ANDROID_HOME -name "ninja" -type f 2>/dev/null || echo "No ninja found in Android SDK"
            echo "=========================="
            
            # Try normal build first
            flutter build apk --release || {
              echo "Normal build failed, trying without native code optimization..."
              flutter build apk --release --no-tree-shake-icons --verbose
            }
      - store_artifacts:
          path: build/app/outputs/flutter-apk/app-release.apk
          destination: android/app-release.apk
      - save_flutter_cache

  # Test Flutter orb - lint job
  orb_lint:
    docker:
      - image: ghcr.io/cirruslabs/flutter:stable
    steps:
      - checkout
      - flutter/install_pub
      - run:
          name: Run orb-based static analysis
          command: flutter analyze lib

  # Test Flutter orb - unit test job
  orb_unit_test:
    docker:
      - image: ghcr.io/cirruslabs/flutter:stable
    steps:
      - checkout
      - flutter/install_pub
      - run:
          name: Run orb-based unit tests
          command: flutter test
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deployment_1

# Define workflows
workflows:
  version: 2
  
  # Basic workflow - runs on all branches
  build_and_test:
    jobs:
      - code_quality
      - test:
          requires:
            - code_quality
      - build_android:
          requires:
            - test
          filters:
            branches:
              only:
                - main
                - develop
  
  # Orb testing workflow
  orb_test:
    jobs:
      - orb_lint
      - orb_unit_test:
          requires:
            - orb_lint
          context: slack-secrets  # You'll need to set up Slack context for notifications
